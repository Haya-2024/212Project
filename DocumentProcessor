import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

public class DocumentProcessor {
    LinkedList<String> filterWords;
    TextIndex docIndex;
    WordInvertedIndex wordIndex;

    // Constructor
    public DocumentProcessor() {
        filterWords = new LinkedList<>();
        docIndex = new TextIndex();
        wordIndex = new WordInvertedIndex();
    }

    // Method to read filter words (stop words)
    public void loadFilterWords(String fileName) {
        try {
            File file = new File(fileName);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                filterWords.insert(line);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: Could not open the file " + fileName);
        }
    }

    // Method to read documents
    public void loadDocuments(String fileName) {
        String line = null;
        try {
            File file = new File(fileName);
            Scanner scanner = new Scanner(file);

            // Skip the title line
            scanner.nextLine();
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                if (line.trim().length() < 3) {
                    System.out.println("Empty line encountered, stopping reading.");
                    break;
                }

                String idStr = line.substring(0, line.indexOf(','));
                int docID = Integer.parseInt(idStr.trim());
                String textContent = line.substring(line.indexOf(',') + 1).trim();
                LinkedList<String> wordList = processTextContent(textContent, docID);
                docIndex.add_Document (new Document(docID, wordList));
            }
        } catch (Exception e) {
            System.out.println("Error processing documents: " + e.getMessage());
        }
    }

    // Method to process text content and create an index
    public LinkedList<String> processTextContent(String content, int docID) {
        LinkedList<String> wordList = new LinkedList<>();
        generateIndices(content, wordList, docID);
        return wordList;
    }

    // Method to generate document index and inverted index
    public void generateIndices(String content, LinkedList<String> wordList, int docID) {
        content = content.toLowerCase().replaceAll("[^a-z0-9 ]", " ");
        String[] tokens = content.split("\\s+");
        for (String token : tokens) {
            if (!isFilterWord(token)) {
                wordList.insert(token);
                wordIndex.add(token, docID);
            }
        }
    }

    // Method to check if a word is in the filter list
    public boolean isFilterWord(String word) {
        if (filterWords == null || filterWords.empty()) {
            return false;
        }

        filterWords.findFirst();
        while (!filterWords.last()) {
            if (filterWords.retrieve().equals(word)) {
                return true;
            }
            filterWords.findNext();
        }
        return false;
    }

    // Method to load filter words and documents
    public void loadFiles(String filterFile, String docFile) {
        loadFilterWords(filterFile);
        loadDocuments(docFile);
    }

    // Main method
    public static void main(String[] args) {
        DocumentProcessor processor = new DocumentProcessor();
        processor.loadFiles("stop.txt", "dataset.csv");
        processor.docIndex.displayDocuments();
        processor.wordIndex.display_inverted_index();
    }
}
